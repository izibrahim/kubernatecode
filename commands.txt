kubectl get pods
kubectl get pods -o wide # get the NODE where the POD is running 
kubectl describe pod <PODNAME> # the pod details 
kubectl describe pod <PODNAME> | grep Image:  # the pod image
kubectl describe pod <PODNAME> | grep State:   # the pod state
kubectl describe pod <PODNAME> | grep Warning   # the pod Warning
kubectl run redis --image=redis dry-run=client -o yaml > pod.yml # create the Pod definition file yml
kubectl apply -f pod.yml # create the pod
kubectl edit pod redis # eid the definition file

key point:
=========

- If you are given a pod definition file, edit that file and use it to create a new pod.
- If you are not given a pod definition file, you may extract the definition to a file using the below command:
- kubectl get pod <pod-name> -o yaml > pod-definition.yaml

Then edit the file to make the necessary changes, delete and re-create the pod.
Use the kubectl edit pod <pod-name> command to edit pod properties.

Replicaset:
==========
kubectl create -f replicaset-definition.yml 
kubectl get replicaset
kubectl delete replicaset myapp-set
kubectl replace -f replicaset-definition.yml  # when change the scale 
kubectl scale -replicas=6 -f myapp-set
kubectl describe replicasets.apps new-replica-set | grep Image:

Creating replicaset
==================
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: replicaset-1
spec:
  replicas: 2
  selector:
    matchLabels:
      tier: frontend
  template:
    metadata:
      labels:
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: nginx

run the command 
kubectl apply -f replicaset-definition-1.yaml
kubectl delete replicasets.apps replicaset-1 
To edit the replicaset
kubectl edit replicasets.apps <NAME>
esc press i once save use :wq

controlplane ~ ➜  kubectl scale replicaset --replicas=2 new-replica-set 
replicaset.apps/new-replica-set scaled

controlplane ~ ➜  kubectl  get replicasets.apps 
NAME              DESIRED   CURRENT   READY   AGE
new-replica-set   2         2         2       23m
